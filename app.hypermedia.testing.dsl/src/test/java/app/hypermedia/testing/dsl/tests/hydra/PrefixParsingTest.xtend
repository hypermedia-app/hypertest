/*
 * generated by Xtext 2.18.0
 */
package app.hypermedia.testing.dsl.tests.hydra

import app.hypermedia.testing.dsl.hydra.HydraScenario
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.^extension.ExtendWith
import static org.assertj.core.api.Assertions.*
import app.hypermedia.testing.dsl.tests.HydraInjectorProvider
import app.hypermedia.testing.dsl.tests.TestHelpers
import app.hypermedia.testing.dsl.hydra.NamespaceDeclaration
import org.junit.jupiter.api.Test
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import app.hypermedia.testing.dsl.hydra.HydraPackage
import app.hypermedia.testing.dsl.core.CorePackage

@ExtendWith(InjectionExtension)
@InjectWith(HydraInjectorProvider)
class PrefixParsingTest {
    @Inject extension ParseHelper<HydraScenario>
    @Inject extension ValidationTestHelper

    @Test
    def void prefix_parsesSuccesfully() {
        // when
        val result = '''
            PREFIX foaf: <http://xmlns.com/foaf/0.1/>
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val namespaceDeclaration = result.namespaces.get(0) as NamespaceDeclaration
        assertThat(namespaceDeclaration.prefix.value).isEqualTo('foaf')
        assertThat(namespaceDeclaration.namespace).isEqualTo('http://xmlns.com/foaf/0.1/')
    }

    @Test
    def void prefixedName_unmappedNamespace_failsValidation() {
        // when
        val result = '''
            PREFIX foaf: <http://xmlns.com/foaf/0.1/>

            With Class ex:foo {
            }
        '''.parse

        // then
        result.assertError(
            CorePackage.Literals.IDENTIFIER,
            null,
            "Unmapped prefix ex")
    }

    @ParameterizedTest
    @MethodSource("app.hypermedia.testing.dsl.tests.hydra.TestCases#invalidUris")
    def void prefixWithInvalidUri_failsValidation(String value) {
        // when
        val result = '''
            PREFIX foaf: <«value»>
        '''.parse

        // then
        result.assertError(
            HydraPackage.Literals.NAMESPACE_DECLARATION,
            null,
            "Value is not a valid URI"
        )
    }

    @ParameterizedTest
    @MethodSource("app.hypermedia.testing.dsl.tests.hydra.TestCases#validUris")
    def void prefixWithValidUri_passesValidation(String value) {
        // when
        val result = '''
            PREFIX foaf: <«value»>
        '''.parse

        // then
        result.assertNoErrors()
    }

    @Test
    def void prefxedName_shouldAllowHyphens() {
        // when
        val result = '''
            PREFIX ex: <http://example.com/>

            With Class ex:Movie {
                Expect Operation ex:create-movie
            }
        '''.parse

        // then
        result.assertNoIssues()
    }
}
