/*
 * generated by Xtext 2.18.0
 */
package app.hypermedia.testing.dsl.tests.core

import app.hypermedia.testing.dsl.core.Model
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import app.hypermedia.testing.dsl.tests.CoreInjectorProvider
import app.hypermedia.testing.dsl.core.RelaxedLinkBlock
import app.hypermedia.testing.dsl.core.ClassBlock
import app.hypermedia.testing.dsl.core.StrictLinkBlock
import static org.assertj.core.api.Assertions.*
import app.hypermedia.testing.dsl.core.LinkStatement
import app.hypermedia.testing.dsl.tests.TestHelpers

@ExtendWith(InjectionExtension)
@InjectWith(CoreInjectorProvider)
class LinkParsingTest {
    @Inject extension ParseHelper<Model>

    @Test
    def void topLevelLink_ParsesSuccessfully() {
        // when
        val result = '''
            With Link "Foo" {
                Expect Status 200
                Expect Property "foobar"
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val linkBlock = result.steps.get(0) as RelaxedLinkBlock
        assertThat(linkBlock.relation.value).isEqualTo("Foo")
        assertThat(linkBlock.children).hasSize(2)
    }

    @Test
    def void classSpecificLevelLink_ParsesSuccessfully() {
        // when
        val result = '''
            With Class "Foo" {
                With Link "Bar" {
                    Expect Status 200
                    Expect Property "foobar"
                }
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val classBlock = result.steps.get(0) as ClassBlock
        val linkBlock = classBlock.children.get(0) as RelaxedLinkBlock
        assertThat(linkBlock.relation.value).isEqualTo("Bar")
        assertThat(linkBlock.children).hasSize(2)
    }

    @Test
    def void classSpecificStrictLink_ParsesSuccessfully() {
        // when
        val result = '''
            With Class "Foo" {
                Expect Link "Bar" {
                    Expect Status 200
                    Expect Property "foobar"
                }
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val classBlock = result.steps.get(0) as ClassBlock
        val linkBlock = classBlock.children.get(0) as StrictLinkBlock
        assertThat(linkBlock.relation.value).isEqualTo("Bar")
        assertThat(linkBlock.children).hasSize(2)
    }

    @Test
    def void linkStatement_ParsesSuccessfully() {
        // when
        val result = '''
            With Class "Foo" {
                Expect Link "Bar"
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val classBlock = result.steps.get(0) as ClassBlock
        val linkBlock = classBlock.children.get(0) as LinkStatement
        assertThat(linkBlock.relation.value).isEqualTo("Bar")
    }
}
