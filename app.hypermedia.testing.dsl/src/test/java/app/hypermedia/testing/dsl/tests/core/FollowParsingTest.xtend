/*
 * generated by Xtext 2.18.0
 */
package app.hypermedia.testing.dsl.tests.core

import app.hypermedia.testing.dsl.core.CoreScenario
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import app.hypermedia.testing.dsl.tests.CoreInjectorProvider
import app.hypermedia.testing.dsl.tests.TestHelpers
import app.hypermedia.testing.dsl.core.RelaxedLinkBlock
import static org.assertj.core.api.Assertions.*
import app.hypermedia.testing.dsl.core.FollowStatement

@ExtendWith(InjectionExtension)
@InjectWith(CoreInjectorProvider)
class FollowParsingTest {
    @Inject extension ParseHelper<CoreScenario>

    @Test
    def void followVariable_ParsesSuccessfully() {
        // when
        val result = '''
            With Link "Foo" {
                Follow [variable]
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val linkBlock = result.steps.get(0) as RelaxedLinkBlock
        val statement = linkBlock.children.get(0) as FollowStatement
        assertThat(statement.variable).isEqualTo("variable")
    }
}
