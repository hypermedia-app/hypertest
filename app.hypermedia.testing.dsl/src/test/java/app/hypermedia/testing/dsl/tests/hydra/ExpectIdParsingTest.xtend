/*
 * generated by Xtext 2.18.0
 */
package app.hypermedia.testing.dsl.tests.hydra

import app.hypermedia.testing.dsl.hydra.HydraScenario
import app.hypermedia.testing.dsl.tests.HydraInjectorProvider
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.api.Test
import static org.assertj.core.api.Assertions.*
import app.hypermedia.testing.dsl.tests.TestHelpers
import app.hypermedia.testing.dsl.hydra.IdentifierStatement
import app.hypermedia.testing.dsl.core.ClassBlock

@ExtendWith(InjectionExtension)
@InjectWith(HydraInjectorProvider)
class ExpectIdParsingTest {
    @Inject extension ParseHelper<HydraScenario>

    @Test
    def void expectId_canBeUsedWithUri() {
        // when
        val result = '''
            With Class <http://example.com/User> {
                Expect Id <http://example.com/Tomasz>
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val clas = result.steps.get(0) as ClassBlock
        val expectation = clas.children.get(0) as IdentifierStatement
        assertThat(expectation.id.value).isEqualTo('http://example.com/Tomasz')
    }

    @Test
    def void expectId_canBeUsedWithPrefixedName() {
        // when
        val result = '''
            PREFIX ex: <http://example.com/>

            With Class <http://example.com/User> {
                Expect Id ex:Tomasz
            }
        '''.parse

        // then
        TestHelpers.assertModelParsedSuccessfully(result)

        val clas = result.steps.get(0) as ClassBlock
        val expectation = clas.children.get(0) as IdentifierStatement
        assertThat(expectation.id.value).isEqualTo('ex:Tomasz')
    }
}
