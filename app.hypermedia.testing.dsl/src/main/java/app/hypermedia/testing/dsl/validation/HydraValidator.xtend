/*
 * generated by Xtext 2.18.0
 */
package app.hypermedia.testing.dsl.validation

import org.eclipse.xtext.validation.Check
import app.hypermedia.testing.dsl.hydra.OperationBlock

import app.hypermedia.testing.dsl.Modifier
import app.hypermedia.testing.dsl.hydra.HydraPackage

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class HydraValidator extends AbstractHydraValidator {

    @Check
    def checkTopLevelOperationModifier(OperationBlock it) {
        val topLevel = eContainer.eContainer === null
        if (topLevel && modifier == Modifier.EXPECT) {
            error("Root operation can only use the 'With' modifier",
                  HydraPackage.Literals.OPERATION_BLOCK__MODIFIER)
        }
    }

    @Check
	def checkOperationChildren(OperationBlock it) {
	    val topLevel = eContainer.eContainer === null
	    val hasInvocations = invocations !== null && invocations.length > 0

	    if (hasInvocations || modifier != Modifier.WITH) {
	        return
	    }

	    if (topLevel) {
            error("Invocations missing",
                  HydraPackage.Literals.OPERATION_BLOCK__INVOCATIONS)
        }
	    else {
            warning("Invocations missing",
                    HydraPackage.Literals.OPERATION_BLOCK__INVOCATIONS)
	    }
	}
}
